{
  "version": 3,
  "sources": ["../../@cloudinary/transformation-builder-sdk/internal/qualifier/QualifierValue.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/unsupportedError.js", "../../@cloudinary/transformation-builder-sdk/internal/models/qualifierToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/QualifierModel.js", "../../@cloudinary/transformation-builder-sdk/internal/qualifier/Qualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag/FlagQualifier.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/flag.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/dataStructureUtils.js", "../../@cloudinary/transformation-builder-sdk/internal/models/actionToJson.js", "../../@cloudinary/transformation-builder-sdk/internal/models/ActionModel.js", "../../@cloudinary/transformation-builder-sdk/internal/Action.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/format/FormatQualifier.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/objectFlip.js", "../../@cloudinary/transformation-builder-sdk/internal/internalConstants.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/progressive.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryFormatAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryQualityAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceFromICCAction.js", "../../@cloudinary/transformation-builder-sdk/qualifiers/colorSpace.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryColorSpaceAction.js", "../../@cloudinary/transformation-builder-sdk/internal/utils/toFloatAsString.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery/DeliveryDPRAction.js", "../../@cloudinary/transformation-builder-sdk/actions/delivery.js"],
  "sourcesContent": ["/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\r\nclass QualifierValue {\r\n    /**\r\n     *\r\n     * @param {QualifierValue | QualifierValue[] | any[] | string | number}qualifierValue\r\n     */\r\n    constructor(qualifierValue) {\r\n        this.values = [];\r\n        this.delimiter = ':'; // {value}{delimiter}{value}...\r\n        if (this.hasValue(qualifierValue)) {\r\n            this.addValue(qualifierValue);\r\n        }\r\n    }\r\n    /**\r\n     * @description Joins the provided values with the provided delimiter\r\n     */\r\n    toString() {\r\n        return this.values.join(this.delimiter);\r\n    }\r\n    /**\r\n     * @description Checks if the provided argument has a value\r\n     * @param {any} v\r\n     * @private\r\n     * @return {boolean}\r\n     */\r\n    hasValue(v) {\r\n        return typeof v !== 'undefined' && v !== null && v !== '';\r\n    }\r\n    /**\r\n     * @desc Adds a value for the this qualifier instance\r\n     * @param {any} value\r\n     * @return {this}\r\n     */\r\n    addValue(value) {\r\n        // Append value or array of values\r\n        if (Array.isArray(value)) {\r\n            this.values = this.values.concat(value);\r\n        }\r\n        else {\r\n            this.values.push(value);\r\n        }\r\n        // Remove falsy values\r\n        this.values = this.values.filter((v) => this.hasValue(v));\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Sets the delimiter for this instance\r\n     * @param delimiter\r\n     */\r\n    setDelimiter(delimiter) {\r\n        this.delimiter = delimiter;\r\n        return this;\r\n    }\r\n}\r\nexport { QualifierValue };\r\n", "class UnsupportedError extends Error {\r\n    constructor(message = 'Unsupported') {\r\n        super(message);\r\n    }\r\n}\r\n/**\r\n * Creates a new UnsupportedError\r\n * @param message\r\n */\r\nfunction createUnsupportedError(message) {\r\n    return new UnsupportedError(message);\r\n}\r\nexport { UnsupportedError, createUnsupportedError };\r\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\r\n/**\r\n * Returns the action's model\r\n */\r\nexport function qualifierToJson() {\r\n    return this._qualifierModel || { error: createUnsupportedError(`unsupported qualifier ${this.constructor.name}`) };\r\n}\r\n", "import { qualifierToJson } from \"./qualifierToJson.js\";\r\nexport class QualifierModel {\r\n    constructor() {\r\n        this._qualifierModel = {};\r\n    }\r\n    toJson() {\r\n        return qualifierToJson.apply(this);\r\n    }\r\n}\r\n", "import { QualifierValue } from './QualifierValue.js';\r\nimport { QualifierModel } from '../models/QualifierModel.js';\r\n/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n */\r\nclass Qualifier extends QualifierModel {\r\n    constructor(key, qualifierValue) {\r\n        super();\r\n        this.delimiter = '_'; // {key}{delimiter}{qualifierValue}\r\n        this.key = key;\r\n        if (qualifierValue instanceof QualifierValue) {\r\n            this.qualifierValue = qualifierValue;\r\n        }\r\n        else {\r\n            this.qualifierValue = new QualifierValue();\r\n            this.qualifierValue.addValue(qualifierValue);\r\n        }\r\n    }\r\n    toString() {\r\n        const { key, delimiter, qualifierValue } = this;\r\n        return `${key}${delimiter}${qualifierValue.toString()}`;\r\n    }\r\n    addValue(value) {\r\n        this.qualifierValue.addValue(value);\r\n        return this;\r\n    }\r\n}\r\nexport { Qualifier };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @memberOf Qualifiers.Flag\r\n * @extends {SDK.Qualifier}\r\n * @description the FlagQualifier class\r\n */\r\nclass FlagQualifier extends Qualifier {\r\n    constructor(flagType, flagValue) {\r\n        let qualifierValue;\r\n        if (flagValue) {\r\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\r\n        }\r\n        else {\r\n            qualifierValue = flagType;\r\n        }\r\n        super('fl', qualifierValue);\r\n        this.flagValue = flagValue;\r\n    }\r\n    toString() {\r\n        return super.toString().replace(/\\./g, '%2E');\r\n    }\r\n    getFlagValue() {\r\n        return this.flagValue;\r\n    }\r\n}\r\nexport { FlagQualifier };\r\n", "/**\r\n * @description Defines flags that you can use to alter the default transformation behavior.\r\n * @namespace Flag\r\n * @memberOf Qualifiers\r\n */\r\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used when delivering a video file as an image format that supports animation, such as animated WebP.\r\n * Plays all frames rather than just delivering the first one as a static image.\r\n * Use this flag in addition to the flag or parameter controlling the delivery format,\r\n * for example f_auto or fl_awebp.\r\n\r\n * Note: When delivering a video in GIF format, it is delivered as an animated GIF by default and this flag is not\r\n * necessary. To deliver a single frame of a video in GIF format, use the page parameter.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animated() {\r\n    return new FlagQualifier('animated');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to WebP format, generate an animated WebP from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated WebPs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedWebP() {\r\n    return new FlagQualifier('awebp');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used together with automatic quality (q_auto):\r\n * allow switching to PNG8 encoding if the quality algorithm decides that it's more efficient.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction anyFormat() {\r\n    return new FlagQualifier('any_format');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When converting animated images to PNG format, generates an animated PNG from all the frames in the\r\n * original\r\n * animated file instead of only from the first still frame.\r\n *\r\n * Note that animated PNGs are not supported in all browsers and versions.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction animatedPng() {\r\n    return new FlagQualifier('apng');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image\r\n * (e.g., manually created using PhotoShop).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clip() {\r\n    return new FlagQualifier('clip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Trims pixels according to a clipping path included in the original image (e.g., manually created\r\n * using PhotoShop)\r\n * using an evenodd clipping rule.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction clipEvenOdd() {\r\n    return new FlagQualifier('clip_evenodd');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all image meta-data (IPTC, Exif and XMP) while applying an incoming\r\n * transformation.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceStrip() {\r\n    return new FlagQualifier('force_strip');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Allows custom flag\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction custom(value) {\r\n    return new FlagQualifier(value);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Adds ICC color space metadata to the image, even when the original image doesn't contain any ICC data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction forceIcc() {\r\n    return new FlagQualifier('force_icc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Delivers the image as an attachment.\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction attachment(filename) {\r\n    return new FlagQualifier('attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Returns metadata of the input asset and of the transformed output asset in JSON instead of the\r\n * transformed image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction getInfo() {\r\n    return new FlagQualifier('getinfo');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Deliver an HLS adaptive bitrate streaming file as HLS v3 instead of the default version (HLS v4).\r\n * Delivering in this format requires a private CDN configuration.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction hlsv3() {\r\n    return new FlagQualifier('hlsv3');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Sets the cache-control to immutable for the asset.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction immutableCache() {\r\n    return new FlagQualifier('immutable_cache');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description * Allows specifying only either width or height so the value of the second axis remains as is, and is not\r\n * recalculated to maintain the aspect ratio of the original image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreInitialAspectRatio() {\r\n    return new FlagQualifier('ignore_aspect_ratio');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps the copyright related fields when stripping meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepAttribution() {\r\n    return new FlagQualifier('keep_attribution');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * Keep the Display Aspect Ratio metadata of the uploaded video (if it’s different from the current video\r\n * dimensions).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepDar() {\r\n    return new FlagQualifier('keep_dar');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Keeps all meta-data.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction keepIptc() {\r\n    return new FlagQualifier('keep_iptc');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Applies all chained transformations, until a transformation component that includes this flag, on the last added\r\n * overlay or underlay instead of applying on the containing image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction layerApply() {\r\n    return new FlagQualifier('layer_apply');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Automatically use lossy compression when delivering animated GIF files.\r\n *\r\n * This flag can also be used as a conditional flag for delivering PNG files: it tells Cloudinary to deliver the\r\n * image in PNG format (as requested) unless there is no transparency channel - in which case deliver in JPEG\r\n * format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction lossy() {\r\n    return new FlagQualifier('lossy');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Convert the audio channel to mono\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction mono() {\r\n    return new FlagQualifier('mono');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/transformation_reference#fl_no_overflow|Overflow in overlays}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noOverflow() {\r\n    return new FlagQualifier('no_overflow');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Don't stream a video that is currently being generated on the fly. Wait until the video is fully generated.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction noStream() {\r\n    return new FlagQualifier('no_stream');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png24 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png24() {\r\n    return new FlagQualifier('png24');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the png32 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png32() {\r\n    return new FlagQualifier('png32');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generate PNG images in the PNG8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction png8() {\r\n    return new FlagQualifier('png8');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description When used with automatic fetch_format (f_auto): ensures that images with a transparency channel will be\r\n * delivered in PNG format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction preserveTransparency() {\r\n    return new FlagQualifier('preserve_transparency');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates a JPG image using the progressive (interlaced) JPG format.\r\n *\r\n * This format allows the browser to quickly show a low-quality rendering of the image until the full-quality\r\n * image is loaded.\r\n *\r\n * @param {string} mode? The mode to determine a specific progressive outcome as follows:\r\n * * semi - A smart optimization of the decoding time, compression level and progressive rendering\r\n *          (less iterations). This is the default mode when using q_auto.\r\n * * steep - Delivers a preview very quickly, and in a single later phase improves the image to\r\n *           the required resolution.\r\n * * none  - Use this to deliver a non-progressive image. This is the default mode when setting\r\n *           a specific value for quality.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction progressive(mode) {\r\n    return new FlagQualifier('progressive', mode);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction regionRelative() {\r\n    return new FlagQualifier('region_relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Reduces the image to one flat pixelated layer (as opposed to the default vector based graphic) in\r\n * order to enable\r\n * PDF resizing and overlay manipulations.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction rasterize() {\r\n    return new FlagQualifier('rasterize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction relative() {\r\n    return new FlagQualifier('relative');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to run a sanitizer on the image (relevant only for the SVG format).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction sanitize() {\r\n    return new FlagQualifier('sanitize');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Splices the video stipulated as an overlay on to the end of the container video instead of adding it as an\r\n * overlay.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction splice() {\r\n    return new FlagQualifier('splice');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Instructs Cloudinary to clear all ICC color profile data included with the image.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction stripProfile() {\r\n    return new FlagQualifier('strip_profile');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description If the requested video transformation has already been generated, this flag works identically to\r\n * Flag::attachment.\r\n *\r\n *  However, if the video transformation is being requested for the first time, this flag causes the video download\r\n * to begin immediately, streaming it as a fragmented video file.\r\n *\r\n * In contrast, if the regular fl_attachment flag is used when a user requests a new video transformation,\r\n * the download will begin only after the complete transformed video has been generated.\r\n *\r\n * Most standard video players successfully play fragmented video files without issue.\r\n *\r\n * @param {string} filename The attachment's filename\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction streamingAttachment(filename) {\r\n    return new FlagQualifier('streaming_attachment', filename);\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Generates TIFF images using LZW compression and in the TIFF8 format.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiff8Lzw() {\r\n    return new FlagQualifier('tiff8_lzw');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Used internally by Position within an Overlay, this flag will tile the overlay across your image.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/layers#automatic_tiling|Tiling overlay}\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction tiled() {\r\n    return new FlagQualifier('tiled');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Truncate (trim) a video file based on the start time defined in the metadata (relevant only where the metadata\r\n * includes a directive to play only a section of the video).\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction truncateTS() {\r\n    return new FlagQualifier('truncate_ts');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description Create a waveform image (in the format specified by the file extension) from the audio or video file.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction waveform() {\r\n    return new FlagQualifier('waveform');\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.Flag\r\n * @description A qualifier that ensures that an alpha channel is not applied to a TIFF image if it is a mask channel.\r\n * @return {Qualifiers.Flag.FlagQualifier}\r\n */\r\nfunction ignoreMaskChannels() {\r\n    return new FlagQualifier('ignore_mask_channels');\r\n}\r\nconst Flag = {\r\n    animated, anyFormat, animatedPng, animatedWebP,\r\n    clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize,\r\n    sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache,\r\n    keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono,\r\n    layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip,\r\n    tiled, noOverflow, ignoreMaskChannels\r\n};\r\nexport { Flag, animated, anyFormat, animatedPng, animatedWebP, clipEvenOdd, lossy, preserveTransparency, png8, png24, png32, progressive, rasterize, sanitize, stripProfile, tiff8Lzw, attachment, forceIcc, forceStrip, getInfo, immutableCache, keepAttribution, keepIptc, custom, streamingAttachment, hlsv3, keepDar, noStream, mono, layerApply, relative, regionRelative, splice, truncateTS, waveform, ignoreInitialAspectRatio, clip, tiled, noOverflow, ignoreMaskChannels };\r\n", "/**\r\n * Sort a map by key\r\n * @private\r\n * @param map <string, any>\r\n * @Return array of map's values sorted by key\r\n */\r\nfunction mapToSortedArray(map, flags) {\r\n    const array = Array.from(map.entries());\r\n    // objects from the Array.from() method above are stored in array of arrays:\r\n    // [[qualifierKey, QualifierObj], [qualifierKey, QualifierObj]]\r\n    // Flags is an array of FlagQualifierObj\r\n    // We need to convert it to the same form: [flagQualifier] =>  ['fl', flagQualifier]\r\n    flags.forEach((flag) => {\r\n        array.push(['fl', flag]); // push ['fl', flagQualifier]\r\n    });\r\n    return array.sort().map((v) => v[1]);\r\n}\r\n/**\r\n * Checks if `value` is a string.\r\n * @private\r\n * @param {*} value The value to check.\r\n * @return {boolean} `true` if `value` is a string, else `false`.\r\n */\r\nfunction isString(value) {\r\n    return (typeof value === 'string' || value instanceof String);\r\n}\r\nexport { isString, mapToSortedArray };\r\n", "import { createUnsupportedError } from \"../utils/unsupportedError.js\";\r\n/**\r\n * Returns the action's model\r\n */\r\nexport function actionToJson() {\r\n    var _a, _b, _c;\r\n    const actionModelIsNotEmpty = this._actionModel && Object.keys(this._actionModel).length;\r\n    const sourceTransformationError = (_c = (_b = (_a = this._actionModel) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.transformation) === null || _c === void 0 ? void 0 : _c.error;\r\n    // Should return error when there is unsupported transformation inside\r\n    if (sourceTransformationError && sourceTransformationError instanceof Error) {\r\n        return { error: sourceTransformationError };\r\n    }\r\n    if (actionModelIsNotEmpty) {\r\n        return this._actionModel;\r\n    }\r\n    return { error: createUnsupportedError(`unsupported action ${this.constructor.name}`) };\r\n}\r\n", "import { actionToJson } from \"./actionToJson.js\";\r\nexport class ActionModel {\r\n    constructor() {\r\n        this._actionModel = {};\r\n    }\r\n    toJson() {\r\n        return actionToJson.apply(this);\r\n    }\r\n}\r\n", "import { FlagQualifier } from \"../qualifiers/flag/FlagQualifier.js\";\r\nimport { Qualifier } from \"./qualifier/Qualifier.js\";\r\nimport { mapToSortedArray } from \"./utils/dataStructureUtils.js\";\r\nimport { ActionModel } from \"./models/ActionModel.js\";\r\n/**\r\n * @summary SDK\r\n * @memberOf SDK\r\n * @description Defines the category of transformation to perform.\r\n */\r\nclass Action extends ActionModel {\r\n    constructor() {\r\n        super(...arguments);\r\n        // We're using map, to overwrite existing keys. for example:\r\n        // addParam(w_100).addQualifier(w_200) should result in w_200. and not w_100,w_200\r\n        this.qualifiers = new Map();\r\n        // Unlike regular qualifiers, there can be multiple flags in each url component /fl_1,fl_2/\r\n        // If the falgs are added to the qualifiers map, only a single flag could exist in a component (it's a map)\r\n        // So flags are stored separately until the very end because of that reason\r\n        this.flags = [];\r\n        this.delimiter = ','; // {qualifier}{delimiter}{qualifier} for example: `${'w_100'}${','}${'c_fill'}`\r\n        this.actionTag = ''; // A custom name tag to identify this action in the future\r\n    }\r\n    prepareQualifiers() { }\r\n    /**\r\n     * @description Returns the custom name tag that was given to this action\r\n     * @return {string}\r\n     */\r\n    getActionTag() {\r\n        return this.actionTag;\r\n    }\r\n    /**\r\n     * @description Sets the custom name tag for this action\r\n     * @return {this}\r\n     */\r\n    setActionTag(tag) {\r\n        this.actionTag = tag;\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Calls toString() on all child qualifiers (implicitly by using .join()).\r\n     * @return {string}\r\n     */\r\n    toString() {\r\n        this.prepareQualifiers();\r\n        return mapToSortedArray(this.qualifiers, this.flags).join(this.delimiter);\r\n    }\r\n    /**\r\n     * @description Adds the parameter to the action.\r\n     * @param {SDK.Qualifier} qualifier\r\n     * @return {this}\r\n     */\r\n    addQualifier(qualifier) {\r\n        // if string, find the key and value\r\n        if (typeof qualifier === 'string') {\r\n            const [key, value] = qualifier.toLowerCase().split('_');\r\n            if (key === 'fl') {\r\n                // if string qualifier is a flag, store it in the flags arrays\r\n                this.flags.push(new FlagQualifier(value));\r\n            }\r\n            else {\r\n                // if the string qualifier is not a flag, create a new qualifier from it\r\n                this.qualifiers.set(key, new Qualifier(key, value));\r\n            }\r\n        }\r\n        else {\r\n            // if a qualifier object, insert to the qualifiers map\r\n            this.qualifiers.set(qualifier.key, qualifier);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Adds a flag to the current action.\r\n     * @param {Qualifiers.Flag} flag\r\n     * @return {this}\r\n     */\r\n    addFlag(flag) {\r\n        if (typeof flag === 'string') {\r\n            this.flags.push(new FlagQualifier(flag));\r\n        }\r\n        else {\r\n            if (flag instanceof FlagQualifier) {\r\n                this.flags.push(flag);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    addValueToQualifier(qualifierKey, qualifierValue) {\r\n        this.qualifiers.get(qualifierKey).addValue(qualifierValue);\r\n        return this;\r\n    }\r\n}\r\nexport { Action };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\n/**\r\n * @memberOf Qualifiers.Format\r\n * @extends {SDK.QualifierValue}\r\n */\r\nclass FormatQualifier extends QualifierValue {\r\n    constructor(val) {\r\n        super(val);\r\n        this.val = val;\r\n    }\r\n    getValue() {\r\n        return this.val;\r\n    }\r\n}\r\nexport { FormatQualifier };\r\n", "/**\r\n * Flip keys and values for given object\r\n * @param obj\r\n */\r\nfunction objectFlip(obj) {\r\n    const result = {};\r\n    Object.keys(obj).forEach((key) => {\r\n        result[obj[key]] = key;\r\n    });\r\n    return result;\r\n}\r\nexport { objectFlip };\r\n", "/**\r\n * This file is for internal constants only.\r\n * It is not intended for public use and is not part of the public API\r\n */\r\nimport { objectFlip } from \"./utils/objectFlip.js\";\r\nexport const CONDITIONAL_OPERATORS = {\r\n    \"=\": \"eq\",\r\n    \"!=\": \"ne\",\r\n    \"<\": \"lt\",\r\n    \">\": \"gt\",\r\n    \"<=\": \"lte\",\r\n    \">=\": \"gte\",\r\n    \"&&\": \"and\",\r\n    \"||\": \"or\",\r\n    \"*\": \"mul\",\r\n    \"/\": \"div\",\r\n    \"+\": \"add\",\r\n    \"-\": \"sub\",\r\n    \"^\": \"pow\"\r\n};\r\nexport const RESERVED_NAMES = {\r\n    \"aspect_ratio\": \"ar\",\r\n    \"aspectRatio\": \"ar\",\r\n    \"current_page\": \"cp\",\r\n    \"currentPage\": \"cp\",\r\n    \"duration\": \"du\",\r\n    \"face_count\": \"fc\",\r\n    \"faceCount\": \"fc\",\r\n    \"height\": \"h\",\r\n    \"initial_aspect_ratio\": \"iar\",\r\n    \"initial_height\": \"ih\",\r\n    \"initial_width\": \"iw\",\r\n    \"initialAspectRatio\": \"iar\",\r\n    \"initialHeight\": \"ih\",\r\n    \"initialWidth\": \"iw\",\r\n    \"initial_duration\": \"idu\",\r\n    \"initialDuration\": \"idu\",\r\n    \"page_count\": \"pc\",\r\n    \"page_x\": \"px\",\r\n    \"page_y\": \"py\",\r\n    \"pageCount\": \"pc\",\r\n    \"pageX\": \"px\",\r\n    \"pageY\": \"py\",\r\n    \"tags\": \"tags\",\r\n    \"width\": \"w\",\r\n    \"trimmed_aspect_ratio\": \"tar\",\r\n    \"current_public_id\": \"cpi\",\r\n    \"initial_density\": \"idn\",\r\n    \"page_names\": \"pgnames\"\r\n};\r\nexport const ACTION_TYPE_TO_CROP_MODE_MAP = {\r\n    limitFit: 'limit',\r\n    limitFill: 'lfill',\r\n    minimumFit: 'mfit',\r\n    thumbnail: 'thumb',\r\n    limitPad: 'lpad',\r\n    minimumPad: 'mpad',\r\n    autoPad: 'auto_pad'\r\n};\r\nexport const ACTION_TYPE_TO_DELIVERY_MODE_MAP = {\r\n    colorSpace: 'cs',\r\n    dpr: 'dpr',\r\n    density: 'dn',\r\n    defaultImage: 'd',\r\n    format: 'f',\r\n    quality: 'q'\r\n};\r\nexport const ACTION_TYPE_TO_EFFECT_MODE_MAP = {\r\n    redEye: 'redeye',\r\n    advancedRedEye: 'adv_redeye',\r\n    oilPaint: 'oil_paint',\r\n    unsharpMask: 'unsharp_mask',\r\n    makeTransparent: 'make_transparent',\r\n    generativeRestore: 'gen_restore',\r\n    upscale: 'upscale'\r\n};\r\nexport const ACTION_TYPE_TO_QUALITY_MODE_MAP = {\r\n    autoBest: 'auto:best',\r\n    autoEco: 'auto:eco',\r\n    autoGood: 'auto:good',\r\n    autoLow: 'auto:low',\r\n    jpegminiHigh: 'jpegmini:1',\r\n    jpegminiMedium: 'jpegmini:2',\r\n    jpegminiBest: 'jpegmini:0'\r\n};\r\nexport const ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP = {\r\n    fullHd: 'full_hd',\r\n    fullHdWifi: 'full_hd_wifi',\r\n    fullHdLean: 'full_hd_lean',\r\n    hdLean: 'hd_lean'\r\n};\r\nexport const CHROMA_VALUE_TO_CHROMA_MODEL_ENUM = {\r\n    444: \"CHROMA_444\",\r\n    420: \"CHROMA_420\"\r\n};\r\nexport const COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP = {\r\n    'noCmyk': 'no_cmyk',\r\n    'keepCmyk': 'keep_cmyk',\r\n    'tinySrgb': 'tinysrgb',\r\n    'srgbTrueColor': 'srgb:truecolor'\r\n};\r\nexport const ACTION_TYPE_TO_BLEND_MODE_MAP = {\r\n    'antiRemoval': 'anti_removal'\r\n};\r\nexport const CHROMA_MODEL_ENUM_TO_CHROMA_VALUE = objectFlip(CHROMA_VALUE_TO_CHROMA_MODEL_ENUM);\r\nexport const COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP = objectFlip(COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP);\r\nexport const CROP_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_CROP_MODE_MAP);\r\nexport const DELIVERY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_DELIVERY_MODE_MAP);\r\nexport const EFFECT_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_EFFECT_MODE_MAP);\r\nexport const QUALITY_MODE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_QUALITY_MODE_MAP);\r\nexport const STREAMING_PROFILE_TO_ACTION_TYPE_MAP = objectFlip(ACTION_TYPE_TO_STREAMING_PROFILE_MODE_MAP);\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { FormatQualifier } from \"../../qualifiers/format/FormatQualifier.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { DELIVERY_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Qualifies the delivery of an asset.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n */\r\nclass DeliveryAction extends Action {\r\n    /**\r\n     * @param {string} deliveryKey A generic Delivery Action Key (such as q, f, dn, etc.)\r\n     * @param {string} deliveryType A Format Qualifiers for the action, such as Quality.auto()\r\n     * @param {string} modelProperty internal model property of the action, for example quality uses `level` while dpr uses `density`\r\n     * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n     */\r\n    constructor(deliveryKey, deliveryType, modelProperty) {\r\n        super();\r\n        this._actionModel = {};\r\n        let deliveryTypeValue;\r\n        if (deliveryType instanceof FormatQualifier) {\r\n            deliveryTypeValue = deliveryType.getValue();\r\n        }\r\n        else {\r\n            deliveryTypeValue = deliveryType;\r\n        }\r\n        this._actionModel.actionType = DELIVERY_MODE_TO_ACTION_TYPE_MAP[deliveryKey];\r\n        this._actionModel[modelProperty] = deliveryTypeValue;\r\n        this.addQualifier(new Qualifier(deliveryKey, deliveryType));\r\n    }\r\n}\r\nexport { DeliveryAction };\r\n", "/**\r\n * @description Contains functions to select the mode when using a progressive format.\r\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\r\n * @memberOf Qualifiers\r\n * @namespace Progressive\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\r\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(format(jpg()).progressive(steep()))\r\n */\r\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\r\nclass ProgressiveQualifier extends FlagQualifier {\r\n    constructor(mode) {\r\n        super('progressive', mode);\r\n    }\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction none() {\r\n    return new ProgressiveQualifier('none');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction semi() {\r\n    return new ProgressiveQualifier('semi');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction steep() {\r\n    return new ProgressiveQualifier('steep');\r\n}\r\n/**\r\n * @memberOf Qualifiers.Progressive\r\n */\r\nfunction progressive() {\r\n    return new ProgressiveQualifier();\r\n}\r\nconst Progressive = {\r\n    semi,\r\n    none,\r\n    steep,\r\n    progressive,\r\n    ProgressiveQualifier\r\n};\r\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };\r\n", "import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\r\nimport { DeliveryAction } from \"./DeliveryAction.js\";\r\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\r\n/**\r\n * @memberOf Actions.Delivery\r\n * @extends {Actions.Delivery.DeliveryAction}\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryFormatAction extends DeliveryAction {\r\n    constructor(deliveryKey, deliveryType) {\r\n        super(deliveryKey, deliveryType, 'formatType');\r\n    }\r\n    /**\r\n     * @description Uses lossy compression when delivering animated GIF files.\r\n     * @return {this}\r\n     */\r\n    lossy() {\r\n        this._actionModel.lossy = true;\r\n        this.addFlag(lossy());\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Uses progressive compression when delivering JPG file format.\r\n     * @return {this}\r\n     */\r\n    progressive(mode) {\r\n        if (mode instanceof ProgressiveQualifier) {\r\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\r\n            this.addFlag(mode);\r\n        }\r\n        else {\r\n            this._actionModel.progressive = { mode: mode };\r\n            this.addFlag(progressive(mode));\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\r\n     */\r\n    preserveTransparency() {\r\n        this._actionModel.preserveTransparency = true;\r\n        this.addFlag(preserveTransparency());\r\n        return this;\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\r\n        let result;\r\n        if (formatType) {\r\n            result = new this('f', formatType);\r\n        }\r\n        else {\r\n            result = new this('f');\r\n        }\r\n        if (progressive) {\r\n            if (progressive.mode) {\r\n                result.progressive(progressive.mode);\r\n            }\r\n            else {\r\n                result.progressive();\r\n            }\r\n        }\r\n        lossy && result.lossy();\r\n        preserveTransparency && result.preserveTransparency();\r\n        return result;\r\n    }\r\n}\r\nexport { DeliveryFormatAction };\r\n", "import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { DeliveryAction } from \"./DeliveryAction.js\";\r\nimport { CHROMA_VALUE_TO_CHROMA_MODEL_ENUM, CHROMA_MODEL_ENUM_TO_CHROMA_VALUE, ACTION_TYPE_TO_QUALITY_MODE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Controls the quality of the delivered image or video.\r\n * @memberOf Actions.Delivery\r\n * @extends {Actions.Delivery.DeliveryAction}\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryQualityAction extends DeliveryAction {\r\n    /**\r\n     * @param {Qualifiers.Quality} qualityValue a Quality value\r\n     */\r\n    constructor(qualityValue) {\r\n        super('q', qualityValue.toString(), 'level');\r\n    }\r\n    /**\r\n     * Selet the Chroma sub sampling</br>\r\n     * <b>Learn more</b>: {@link https://cloudinary.com/documentation/image_optimization#toggle_chroma_subsampling|Toggling chroma subsampling}\r\n     * @param {420 | 444 | number} type The chroma sub sampling type\r\n     */\r\n    chromaSubSampling(type) {\r\n        this._actionModel.chromaSubSampling = CHROMA_VALUE_TO_CHROMA_MODEL_ENUM[type];\r\n        const qualityWithSubSampling = new QualifierValue([this._actionModel.level, type]);\r\n        qualityWithSubSampling.setDelimiter(':');\r\n        // We either have chroma or quantization, but not both\r\n        return this.addQualifier(new Qualifier('q', qualityWithSubSampling));\r\n    }\r\n    /**\r\n     * Controls the final quality by setting a maximum quantization percentage\r\n     * @param {number} val\r\n     */\r\n    quantization(val) {\r\n        this._actionModel.quantization = val;\r\n        const qualityWithQuantization = new QualifierValue([this._actionModel.level, `qmax_${val}`]).setDelimiter(':');\r\n        // We either have chroma or quantization, but not both\r\n        return this.addQualifier(new Qualifier('q', qualityWithQuantization));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { level, chromaSubSampling, quantization } = actionModel;\r\n        const levelType = ACTION_TYPE_TO_QUALITY_MODE_MAP[level] || level;\r\n        const result = new this(levelType);\r\n        if (chromaSubSampling) {\r\n            //Turn strings like 'CHROMA_420' to 420\r\n            const chromaValue = CHROMA_MODEL_ENUM_TO_CHROMA_VALUE[chromaSubSampling.toUpperCase()];\r\n            chromaValue && result.chromaSubSampling(+chromaValue);\r\n        }\r\n        quantization && result.quantization(quantization);\r\n        return result;\r\n    }\r\n}\r\nexport { DeliveryQualityAction };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\n/**\r\n * @description Specifies the ICC profile to use for the color space.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryColorSpaceFromICCAction extends Action {\r\n    /**\r\n     * @param {string} publicId\r\n     */\r\n    constructor(publicId) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel.actionType = 'colorSpaceFromICC';\r\n        this._actionModel.publicId = publicId;\r\n        const qualifierValue = new QualifierValue(['icc', publicId]).setDelimiter(':');\r\n        this.addQualifier(new Qualifier('cs', qualifierValue));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { publicId } = actionModel;\r\n        return new this(publicId);\r\n    }\r\n}\r\nexport { DeliveryColorSpaceFromICCAction };\r\n", "/**\r\n * @description Contains functions to select the color space mode.\r\n * @namespace ColorSpace\r\n * @memberOf Qualifiers\r\n * @see Visit {@link Actions.Delivery.colorSpace|Delivery Color Space} for an example\r\n */\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction srgb() {\r\n    return 'srgb';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction trueColor() {\r\n    return 'srgb:truecolor';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction tinySrgb() {\r\n    return 'tinysrgb';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction cmyk() {\r\n    return 'cmyk';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction noCmyk() {\r\n    return 'no_cmyk';\r\n}\r\n/**\r\n * @summary qualifier\r\n * @memberOf Qualifiers.ColorSpace\r\n */\r\nfunction keepCmyk() {\r\n    return 'keep_cmyk';\r\n}\r\nconst ColorSpace = {\r\n    cmyk,\r\n    keepCmyk,\r\n    noCmyk,\r\n    srgb,\r\n    tinySrgb,\r\n    trueColor\r\n};\r\nexport { ColorSpace, cmyk, keepCmyk, noCmyk, srgb, tinySrgb, trueColor };\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { ColorSpace } from \"../../qualifiers/colorSpace.js\";\r\nimport { COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP, COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP } from \"../../internal/internalConstants.js\";\r\n/**\r\n * @description Specifies the color space to use.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryColorSpaceAction extends Action {\r\n    /**\r\n     * Create a new DeliveryColorSpaceAction\r\n     * @param mode\r\n     */\r\n    constructor(mode) {\r\n        super();\r\n        this._actionModel = {};\r\n        this._actionModel = {\r\n            actionType: 'colorSpace',\r\n            mode: (COLOR_SPACE_MODE_TO_COLOR_SPACE_MODEL_MODE_MAP[mode] || mode)\r\n        };\r\n        this.addQualifier(new Qualifier('cs', ColorSpace[mode] ? ColorSpace[mode]() : mode));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { mode } = actionModel;\r\n        const colorSpaceMode = COLOR_SPACE_MODEL_MODE_TO_COLOR_SPACE_MODE_MAP[mode] || mode;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(colorSpaceMode);\r\n    }\r\n}\r\nexport { DeliveryColorSpaceAction };\r\n", "/**\r\n * @description\r\n * Returns a string representing the float value of the input, if the input was a number-like.\r\n * Examples:\r\n * - '1.0' -> '1.0'\r\n * - 1 -> '1.0'\r\n * - '5' -> '5.0'\r\n * - 'auto' -> 'auto'\r\n * @private\r\n * @param {string|number} value\r\n * @return {string}\r\n */\r\nexport function toFloatAsString(value) {\r\n    // Turn the input to string\r\n    // The Function will return `returnValue` value if the input is not a number-like expression\r\n    const returnValue = value.toString();\r\n    // if the string contains letters, return the input\r\n    if (returnValue.match(/[A-Z]/gi)) {\r\n        return returnValue;\r\n    }\r\n    // If the leading digit is 0, and we have more than 1 digit, it's not a number.\r\n    // 00, 00000, 0x15 etc.\r\n    if (returnValue.length > 1 && returnValue[0] === '0') {\r\n        return returnValue;\r\n    }\r\n    // Final sanity check, parse the number as a float and check if its NaN\r\n    const isNumberLike = !isNaN(parseFloat(returnValue)) && returnValue.indexOf(':') === -1;\r\n    // If it's a number-like, but the input does not contain a decimal - add it.\r\n    if (isNumberLike && returnValue.indexOf('.') === -1) {\r\n        return `${returnValue}.0`;\r\n    }\r\n    else {\r\n        // If the input already contains a decimal, just return the value\r\n        return returnValue;\r\n    }\r\n}\r\n", "import { Action } from \"../../internal/Action.js\";\r\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\r\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\r\n/**\r\n * @description Specifies the dpr.\r\n * @memberOf Actions.Delivery\r\n * @extends SDK.Action\r\n * @see Visit {@link Actions.Delivery|Delivery} for an example\r\n */\r\nclass DeliveryDPRAction extends Action {\r\n    /**\r\n     * Create a new DeliveryDPRAction\r\n     * @param dprValue\r\n     */\r\n    constructor(dprValue) {\r\n        super();\r\n        this._actionModel = { actionType: 'dpr' };\r\n        // toFloatAsString is used to ensure 1 turns into 1.0\r\n        const dprAsFloat = toFloatAsString(dprValue);\r\n        this._actionModel.dpr = dprAsFloat;\r\n        this.addQualifier(new Qualifier('dpr', dprAsFloat));\r\n    }\r\n    static fromJson(actionModel) {\r\n        const { dpr } = actionModel;\r\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\r\n        // This allows the inheriting classes to determine the class to be created\r\n        return new this(dpr);\r\n    }\r\n}\r\nexport { DeliveryDPRAction };\r\n", "/**\r\n * @description Defines transformations for delivering your assets without changing the visual or audio experience for the end user.\r\n * @memberOf Actions\r\n * @namespace Delivery\r\n * @example\r\n * See the examples under every method\r\n */\r\nimport { DeliveryFormatAction } from \"./delivery/DeliveryFormatAction.js\";\r\nimport { DeliveryQualityAction } from \"./delivery/DeliveryQualityAction.js\";\r\nimport { DeliveryColorSpaceFromICCAction } from \"./delivery/DeliveryColorSpaceFromICCAction.js\";\r\nimport { DeliveryAction } from \"./delivery/DeliveryAction.js\";\r\nimport { DeliveryColorSpaceAction } from \"./delivery/DeliveryColorSpaceAction.js\";\r\nimport { DeliveryDPRAction } from \"./delivery/DeliveryDPRAction.js\";\r\n/**\r\n * @summary action\r\n * @description Defines the format of the delivered asset.\r\n *\r\n * <b>Learn more:</b>\r\n * {@link https://cloudinary.com/documentation/image_transformations#image_format_support|Image formats}\r\n * {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#transcoding_video_to_other_formats|Video formats}\r\n *\r\n * @memberOf Actions.Delivery\r\n * @param {string} format The file format. For a list of supported format types see {@link Qualifiers.Format| format types} for\r\n * possible values\r\n * @return {Actions.Delivery.DeliveryFormat}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  format('jpg'),\r\n * );\r\n *\r\n */\r\nfunction format(format) {\r\n    return new DeliveryFormatAction('f', format);\r\n}\r\n/**\r\n * @summary action\r\n * @description Deliver the image in the specified device pixel ratio.\r\n * @memberOf Actions.Delivery\r\n * @param {string} dpr The DPR (Device Pixel Ratio). Any positive float value.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {dpr} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  dpr('2.0'),\r\n * );\r\n */\r\nfunction dpr(dpr) {\r\n    return new DeliveryDPRAction(dpr);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the quality of the delivered image or video.\r\n *\r\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/image_optimization#how_to_optimize_image_quality|Image quality}\r\n *  {@link https://cloudinary.com/documentation/video_optimization#how_to_optimize_video_quality|Video quality}\r\n * @memberOf Actions.Delivery\r\n * @param {QualityTypes | string | number | Qualifiers.Quality} qualityType For a list of supported quality types see\r\n * {@link Qualifiers.Quality| quality types} for\r\n * possible values.\r\n * @return {Actions.Delivery.DeliveryQualityAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {quality} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {quality} from \"@cloudinary/url-gen/qualifiers/quantity\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  quality('auto'),\r\n * );\r\n */\r\nfunction quality(qualityType) {\r\n    return new DeliveryQualityAction(qualityType);\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the density to use when delivering an image or when converting a vector file such as a PDF or EPS\r\n * document to a web image delivery format.\r\n * @memberOf Actions.Delivery\r\n * @param {number | string} value The density in dpi.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {density} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  density(150),\r\n * );\r\n */\r\nfunction density(value) {\r\n    return new DeliveryAction('dn', value, 'density');\r\n}\r\n/**\r\n * @summary action\r\n * @description Default images can be used in the case that a requested image does not exist.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicIdWithExtension Default image public ID\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {defaultImage} from \"@cloudinary/url-gen/actions/delivery\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  defaultImage('sample'),\r\n * );\r\n */\r\nfunction defaultImage(publicIdWithExtension) {\r\n    return new DeliveryAction('d', publicIdWithExtension, 'defaultImage');\r\n}\r\n/**\r\n * @summary action\r\n * @description Controls the color space used for the delivered image.\r\n * @memberOf Actions.Delivery\r\n * @param {string | Qualifiers.ColorSpace} mode The color space.\r\n * @return {Actions.Delivery.DeliveryAction}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpace} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpace(trueColor()),\r\n * );\r\n */\r\nfunction colorSpace(mode) {\r\n    return new DeliveryColorSpaceAction(mode);\r\n}\r\n/**\r\n * @summary action\r\n * @description Specifies the ICC profile to use for the color space.\r\n * The ICC file must be uploaded to your account as a raw, authenticated file.\r\n * @memberOf Actions.Delivery\r\n * @param {string} publicId The public ID (including the file extension) of the ICC profile that defines the\r\n * color space.\r\n * @return {Actions.Delivery.DeliveryColorSpaceFromICC}\r\n * @example\r\n * import {Cloudinary} from \"@cloudinary/url-gen\";\r\n * import {colorSpaceFromICC} from \"@cloudinary/url-gen/actions/delivery\";\r\n * import {trueColor} from \"@cloudinary/url-gen/qualifiers/colorSpace\";\r\n *\r\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\r\n * const image = yourCldInstance.image('woman');\r\n * image.delivery(\r\n *  colorSpaceFromICC('sample.icc'),\r\n * );\r\n */\r\nfunction colorSpaceFromICC(publicId) {\r\n    return new DeliveryColorSpaceFromICCAction(publicId);\r\n}\r\nconst Delivery = {\r\n    format,\r\n    dpr,\r\n    density,\r\n    defaultImage,\r\n    colorSpace,\r\n    colorSpaceFromICC,\r\n    quality\r\n};\r\nexport { Delivery, format, dpr, quality, density, defaultImage, colorSpace, colorSpaceFromICC };\r\n"],
  "mappings": "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",
  "names": ["lossy", "progressive", "preserveTransparency", "dpr", "format", "dpr"]
}
